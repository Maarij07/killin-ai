// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/admin/activity-logs/page.tsx
{
  const handler = {} as typeof import("../../src/app/admin/activity-logs/page.js")
  handler satisfies AppPageConfig<"/admin/activity-logs">
}

// Validate ../../src/app/admin/admins/page.tsx
{
  const handler = {} as typeof import("../../src/app/admin/admins/page.js")
  handler satisfies AppPageConfig<"/admin/admins">
}

// Validate ../../src/app/admin/assistant-management/page.tsx
{
  const handler = {} as typeof import("../../src/app/admin/assistant-management/page.js")
  handler satisfies AppPageConfig<"/admin/assistant-management">
}

// Validate ../../src/app/admin/login/page.tsx
{
  const handler = {} as typeof import("../../src/app/admin/login/page.js")
  handler satisfies AppPageConfig<"/admin/login">
}

// Validate ../../src/app/admin/logs/page.tsx
{
  const handler = {} as typeof import("../../src/app/admin/logs/page.js")
  handler satisfies AppPageConfig<"/admin/logs">
}

// Validate ../../src/app/admin/page.tsx
{
  const handler = {} as typeof import("../../src/app/admin/page.js")
  handler satisfies AppPageConfig<"/admin">
}

// Validate ../../src/app/admin/settings/page.tsx
{
  const handler = {} as typeof import("../../src/app/admin/settings/page.js")
  handler satisfies AppPageConfig<"/admin/settings">
}

// Validate ../../src/app/admin/user-management/page.tsx
{
  const handler = {} as typeof import("../../src/app/admin/user-management/page.js")
  handler satisfies AppPageConfig<"/admin/user-management">
}

// Validate ../../src/app/admins/page.tsx
{
  const handler = {} as typeof import("../../src/app/admins/page.js")
  handler satisfies AppPageConfig<"/admins">
}

// Validate ../../src/app/logs/page.tsx
{
  const handler = {} as typeof import("../../src/app/logs/page.js")
  handler satisfies AppPageConfig<"/logs">
}

// Validate ../../src/app/manage-assistants/page.tsx
{
  const handler = {} as typeof import("../../src/app/manage-assistants/page.js")
  handler satisfies AppPageConfig<"/manage-assistants">
}

// Validate ../../src/app/manage-users/page.tsx
{
  const handler = {} as typeof import("../../src/app/manage-users/page.js")
  handler satisfies AppPageConfig<"/manage-users">
}

// Validate ../../src/app/page.tsx
{
  const handler = {} as typeof import("../../src/app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../src/app/settings/page.tsx
{
  const handler = {} as typeof import("../../src/app/settings/page.js")
  handler satisfies AppPageConfig<"/settings">
}

// Validate ../../src/app/api/confirm-payment/route.ts
{
  const handler = {} as typeof import("../../src/app/api/confirm-payment/route.js")
  handler satisfies RouteHandlerConfig<"/api/confirm-payment">
}

// Validate ../../src/app/api/debug/env/route.ts
{
  const handler = {} as typeof import("../../src/app/api/debug/env/route.js")
  handler satisfies RouteHandlerConfig<"/api/debug/env">
}

// Validate ../../src/app/api/debug/stripe-test/route.ts
{
  const handler = {} as typeof import("../../src/app/api/debug/stripe-test/route.js")
  handler satisfies RouteHandlerConfig<"/api/debug/stripe-test">
}

// Validate ../../src/app/api/stripe/cleanup-session/route.ts
{
  const handler = {} as typeof import("../../src/app/api/stripe/cleanup-session/route.js")
  handler satisfies RouteHandlerConfig<"/api/stripe/cleanup-session">
}

// Validate ../../src/app/api/stripe/create-checkout-session/route.ts
{
  const handler = {} as typeof import("../../src/app/api/stripe/create-checkout-session/route.js")
  handler satisfies RouteHandlerConfig<"/api/stripe/create-checkout-session">
}

// Validate ../../src/app/api/stripe/create-payment-intent/route.ts
{
  const handler = {} as typeof import("../../src/app/api/stripe/create-payment-intent/route.js")
  handler satisfies RouteHandlerConfig<"/api/stripe/create-payment-intent">
}

// Validate ../../src/app/api/stripe/payment-success/route.ts
{
  const handler = {} as typeof import("../../src/app/api/stripe/payment-success/route.js")
  handler satisfies RouteHandlerConfig<"/api/stripe/payment-success">
}

// Validate ../../src/app/api/stripe/test-config/route.ts
{
  const handler = {} as typeof import("../../src/app/api/stripe/test-config/route.js")
  handler satisfies RouteHandlerConfig<"/api/stripe/test-config">
}

// Validate ../../src/app/api/stripe/webhook/route.ts
{
  const handler = {} as typeof import("../../src/app/api/stripe/webhook/route.js")
  handler satisfies RouteHandlerConfig<"/api/stripe/webhook">
}





// Validate ../../src/app/admin/layout.tsx
{
  const handler = {} as typeof import("../../src/app/admin/layout.js")
  handler satisfies LayoutConfig<"/admin">
}

// Validate ../../src/app/admin/login/layout.tsx
{
  const handler = {} as typeof import("../../src/app/admin/login/layout.js")
  handler satisfies LayoutConfig<"/admin/login">
}

// Validate ../../src/app/layout.tsx
{
  const handler = {} as typeof import("../../src/app/layout.js")
  handler satisfies LayoutConfig<"/">
}
